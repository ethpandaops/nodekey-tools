package info_network

import (
	"encoding/json"
	"fmt"
	"os"

	"github.com/ethpandaops/nodekey-tools/cmd/common"
	"github.com/spf13/cobra"
)

var (
	inputFile   string
	columnCount uint64
)

var Command = &cobra.Command{
	Use:   "info-network",
	Short: "Display information about a network from a JSON file generated by generate-network",
	RunE:  runInfoNetwork,
}

func init() {
	Command.Flags().StringVar(&inputFile, "input-file", "", "Path to the JSON file containing network information")
	Command.Flags().Uint64Var(&columnCount, "column-count", 128, "Amount of columns for DAS custody columns")
	Command.MarkFlagRequired("input-file")
}

type NodeOutput struct {
	NodeID     string   `json:"nodeId"`
	PrivateKey string   `json:"privateKey"`
	Columns    []uint64 `json:"columns"`
}

func runInfoNetwork(cmd *cobra.Command, args []string) error {
	// Read the JSON file
	jsonData, err := os.ReadFile(inputFile)
	if err != nil {
		return fmt.Errorf("failed to read input file: %v", err)
	}

	// Parse the JSON data
	var nodes []NodeOutput
	if err := json.Unmarshal(jsonData, &nodes); err != nil {
		return fmt.Errorf("failed to parse JSON data: %v", err)
	}

	fmt.Printf("Loaded network information for %d nodes from %s\n", len(nodes), inputFile)

	// Convert NodeOutput to common.NodeInfo for compatibility with printColumnCoverageTable
	nodeInfos := make([]common.NodeInfo, 0, len(nodes))
	for _, node := range nodes {
		nodeInfos = append(nodeInfos, common.NodeInfo{
			NodeID:  node.NodeID,
			Columns: node.Columns,
		})
	}

	// Print the column coverage table
	common.PrintColumnCoverageTable(nodeInfos, columnCount)

	// Count covered columns
	coveredColumns := make(map[uint64]bool)
	for _, node := range nodeInfos {
		for _, col := range node.Columns {
			coveredColumns[col] = true
		}
	}

	fmt.Printf("\nTotal columns covered: %d/%d\n", len(coveredColumns), columnCount)

	// Print uncovered columns if any
	if len(coveredColumns) < int(columnCount) {
		uncoveredColumns := make([]uint64, 0)
		for i := uint64(0); i < columnCount; i++ {
			if !coveredColumns[i] {
				uncoveredColumns = append(uncoveredColumns, i)
			}
		}
		fmt.Printf("Uncovered columns: %v\n", uncoveredColumns)
	}

	return nil
}
